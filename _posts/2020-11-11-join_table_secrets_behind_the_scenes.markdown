---
layout: post
title:      "Join Table Secrets Behind the Scenes"
date:       2020-11-12 02:41:57 +0000
permalink:  join_table_secrets_behind_the_scenes
---


For my Rails portfolio project, I created a small app that was inspired by what I have heard and read about the challenges of educating students during the pandemic. This website is for now, limited in scope, merely providing teachers a way to share with students information about homework assignments, as well as their progress in each class. It could be used by middle schools, high schools, and colleges.

At first I figured I’d let Klasses (Classes) be the join tables between Teachers and Students. After all, teachers have many students through classes and students have many teachers through classes. But of course, each class has only one teacher; and I realized that many teachers will each have a unique experience of the same student. Also, I needed a way for students to have exclusive control over some of their own data (email, password, etc.), while teachers would need to have exclusive control over other student data (grades, homework assignments, etc.).

My solution was to create a StudentStatus join table between each student and each of his or her classes. At the beginning of the year, and each time a new student joins a class, the teacher adds the students, creating StudentStatus instances. Then the students sign up on the website, creating Student instances. This way, Teachers would not have to distribute slips of paper with assigned usernames and passwords to their students in order to access already-created student accounts. I also thought it was important for students to have some initiative and a sense of ownership over their education-related website experience. (Some stretch goals for this project would be to add more features and customization abilities to the student experience, which would be of no concern to teachers.) All the klasses’ collections of studentstatuses serve as a master list of students who are authorized to create accounts on the website (a scalability issue which needs fixing in the future). The interesting thing about the website is that teachers and students will think they are dealing with one-and-the-same bunches of information, when in reality they each have their own separate and protected ones, which interact with each other.

One of the particularly satisfying challenges of this project was handling homework. While a QuizGrade class is fine as a child of StudentStatus, a Homework class would not be. I wanted students to be able to indicate when they had completed each homework assignment. So while a teacher’s perspective is normally to give out one homework assignment each day for each subject, I needed this one entering of a homework assignment on the website to in fact result in as many instances of a Homework class as there were students taking that subject. This Homework class therefore provides join tables between Klass instances and Student (not StudentStatus!) instances. A perhaps limitation of the website is that a teacher will have to enter the same homework assignment for each class period of the same subject, but I was constantly struggling with scope creep during this portfolio project. On the other hand, a teacher might need to make some differences in homework assignments among the different periods of the same subject, depending on how each class is doing on average, or on how the teaching went during a particular period. A stretch goal here could be to give the teacher the option to enter a homework assignment once for all of that subject’s classes or to enter them separately.

This project was challenging and enjoyable for me. I don’t know why I enjoy the differences between users’ conceptions of things and how those things and their relationships are represented in code. I spent more time on the project than the normal two weeks for a Flatiron Rails project. The website really wants to be so much more than what I limited it to (which is still probably more than the MVP that was necessary for this assignment). It also is just begging for JavaScript and Bootstrap or Materialize, which I hope to implement at a later time.
